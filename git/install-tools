#!/bin/sh
#
# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Install all the tools and tricks to make a nice to work with repository

# TODO(dmarting): maybe we should honor also ${DESTDIR} / ${PREFIX}?
GIT_ROOT="$(dirname "$(cd "$(dirname "$0")" && pwd -P)")"
BAZEL_GIT="${1}"
BIN_DIR="${BIN_DIR:-$HOME/bin}"

if [ -z "${BAZEL_GIT}" ]; then
  echo "Usage: $0 path_to_bazel_git" >&2
  exit 1
fi

if ! [ -e "${BIN_DIR}" ]; then
  mkdir -p "${BIN_DIR}" || {
    echo "Cannot create ${BIN_DIR}." >&2
    echo "Please set BIN_DIR to a writable directory." >&2
    exit 1
  }
elif ! ([ -w "${BIN_DIR}" ] && [ -d "${BIN_DIR}" ]); then
  echo "${BIN_DIR} is not a writeable directory." >&2
  echo "Please set BIN_DIR to a writable directory." >&2
  exit 1
fi

if [ ! -x "$(which buildifier)" ]; then
  if [ -x "$(which go)" ]; then
    echo "[-] Found go, installing buildifier with go..."
    go install github.com/bazelbuild/buildifier/buildifier
    BUILDIFIER_PATH="$(which buildifier)"
  elif [ -x "$(which bazel)" ]; then
    echo "[-] Found Bazel, trying to install buildifier with bazel"
    (cd "${GIT_ROOT}" \
        && git submodules update --init buildifier \
        && cd buildifier \
        && bazel build //buildifier \
        && cp bazel-bin/buildifier/buildifier "${BIN_DIR}")
    BUILDIFIER_PATH="${BIN_DIR}/buildifier"
  fi
else
  BUILDIFIER_PATH="$(which buildifier)"
fi

if [ ! -d "${BAZEL_GIT}" ]; then
  # Clone from the Source of Truth
  echo "[-] Cloning bazel"
  git clone https://github.com/bazelbuild/bazel "${BAZEL_GIT}"
fi

if [ -x "${BUILDIFIER_PATH-}" ]; then
  echo "[-] Found buildifier, installing buildifier hook"
  sed "s|%buildifier%|${BUILDIFIER_PATH}|g" "${GIT_ROOT}/git/buildifier-pre-commit" \
      > "${BAZEL_GIT}/.git/hooks/pre-commit"
  chmod +x "${BAZEL_GIT}/.git/hooks/pre-commit"
else
  echo "Buildifier not found."
  echo "It is recommended to format your BUILD file with buildifier."
fi

echo "[-] Installing git rb"
cp "${GIT_ROOT}/git/git-rb" "${BIN_DIR}"
chmod 0755 "${BIN_DIR}/git-rb"

echo "[-] Install gerrit commit hook"
cat "${GIT_ROOT}/git/gerrit-commit-msg" > "${BAZEL_GIT}/.git/hooks/commit-msg"
chmod +x "${BAZEL_GIT}/.git/hooks/commit-msg"

echo "[-] Install git review"
(cd "${BAZEL_GIT}" && git config --local --add alias.review "push https://bazel.googlesource.com/bazel HEAD:refs/for/master")

cat <<EOF

${BAZEL_GIT} is now configured, now:
  - Every commit will get the "Change-Id" tag needed for gerrit review
  - Every build file will be formatted with buildifier
  - You can send a code review by simply \`git review\`
  - Once a review was merged, you can use \`git rb\` to rebase on top of master
EOF

